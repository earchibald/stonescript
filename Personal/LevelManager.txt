/*
Like, a level manager. I think it's going to be easier to
keep everything in a monolithic file because of namespacing
and keeping everything up to date.
*/




/*
Functions
*/

var Ptns = import Personal/Potions

func init()
    storage.Set("DEBUG", false)
    storage.Set("POTION","healing")

    Ptns.setPotion("healing")
    // Potions.brewPotion()


var lItem
func leftEquipped()
  lItem = item.left.id
  var lActivateIcon = ＂ ＂
  lActivateIcon = ＂*＂
  lItem = lActivateIcon + "L: " + lItem

var rItem
func rightEquipped()
  rItem = item.right.id
  var rActivateIcon = ＂ ＂
  var rCoolDown
  rCoolDown = item.GetCooldown(@rItem@)
  ?rCoolDown = 0
    rActivateIcon = ＂*＂
  rItem = @rActivateIcon@ + "R: "+ @rItem@

func leftEquippedShort ()
  var leftWords = []
  ?item.left
    leftWords = string.Split(item.left)
    lItem = "L: " + leftWords[0] + " " + leftWords[1]

func rightEquippedShort ()
  var rightWords = []
  ?item.right
    rightWords = string.Split(item.right)
    rItem = "R: " + rightWords[0] + " " + rightWords[1]

func potionsCanMake(costA,costB)
    var A
    var B
    ?costA = tar & costB = tar
        return res.tar / 20
    :?costA = tar
        A = res.tar / 10
    :?costB = tar
        B = res.tar / 10
    ?costA = bronze & costB = bronze
        return res.bronze / 20
    :?costA = bronze
        A = res.bronze / 10
    :?costB = bronze
        B = res.bronze / 10
    ?costA = wood & costB = wood
        return res.wood / 20
    :?costA = wood
        A = res.wood / 10
    :?costB = wood
        B = res.wood / 10
    ?costA = stone & costB = stone
        return res.stone / 20
    :?costA = stone
        A = res.stone / 10
    :?costB = stone
        B = res.stone / 10
    return math.Min(A,B)



var potionItem
var thePotion = ""
var potionCostA
var potionCostB
func potionEquipped()
    ?thePotion = ""
        thePotion = item.potion
    ?item.potion = healing
        potionCostA = "tar"
        potionCostB = "tar"
        potionItem = "Healing"
    :?item.potion = vampiric
        potionCostA = "tar"
        potionCostB = "bronze"
        potionItem = "Vampiric"
    :?item.potion = cleansing
        potionCostA = "tar"
        potionCostB = "wood"
        potionItem = "Cleansing"
    :?item.potion = defensive
        potionCostA = "tar"
        potionCostB = "stone"
        potionItem = "Defensive"
    :?item.potion = lightning
        potionCostA = "bronze"
        potionCostB = "bronze"
        potionItem  = "Ligntning"
    :?item.potion = berserk
        potionCostA = "bronze"
        potionCostB = "bronze"
        potionItem  = "Berserk"
    :?item.potion = lucky
        potionCostA = "bronze"
        potionCostB = "stone"
        potionItem  = "Lucky"
    :?item.potion = experience
        potionCostA = "wood"
        potionCostB = "wood"
        potionItem  = "Experience"
    :?item.potion = invisibility
        potionCostA = "wood"
        potionCostB = "stone"
        potionItem  = "Invisibility"
    :?item.potion = strength
        potionCostA = "stone"
        potionCostB = "stone"
        potionItem  = "Strength"
    ?  item.potion = empty
        potionItem = "P: Empty (was " + thePotion + ")"
    :
        potionItem = "P: " + potionItem + " Potion (" + potionsCanMake(potionCostA,potionCostB) + ")"

var eP
var theText
func showEquipped(type)
    ?loc.begin | loc.loop
        eP = ui.AddPanel()
        eP.anchor = top_left
        eP.dock   = top_left
        eP.y = 1
        eP.h = 5
        ?type = long
            leftEquipped()
            rightEquipped()
            potionEquipped()
        :?type = short
            leftEquippedShort()
            rightEquippedShort()
            potionEquipped()
        eP.w = math.Max(string.Size(lItem),math.Max(string.Size(rItem), string.Size(potionItem))) + 4
        theText = ui.AddText()
        theText.text = lItem + "\n" + rItem + "\n" + potionItem
        theText.anchor = top_left
        theText.dock = top_left
        theText.x = 2
        theText.y = 1
        theText.h = theText.lines.Count() + 1
        theText.w = math.Max(string.Size(lItem),math.Max(string.Size(rItem), string.Size(potionItem)))
        eP.Add(theText)
    :
        ?type = long
            leftEquipped()
            rightEquipped()
            potionEquipped()
        :?type = short
            leftEquippedShort()
            rightEquippedShort()
            potionEquipped()
        theText.text = lItem + "\n" + rItem + "\n" + potionItem
        theText.w = math.Max(string.Size(lItem),math.Max(string.Size(rItem), string.Size(potionItem)))
        eP.w = theText.w + 4
        eP.Add(theText)
    ?key = primaryBegin
        ?eP.visible
            eP.visible = false
        :
            eP.visible = true

func foeName(X,Y)
  ?foe
    >f@X@,@Y@,@foe.name@

func foeShortName(X,Y)
    var nameWords
    ?foe
        nameWords = string.Split(foe.name,",")
        ?storage.Get("DEBUG")
            >`0,0,#red,@foe.name@
        >f@X@,@Y@,@nameWords[0]@

func foeTarget(type)
  ?foe.distance <= 20
    ?type = "arrow"
      >f0,-1,#red,|\nv
    :?type = "none"
      >f-2,-1,   \n   
    :
      >f0,-1,#blue,❄

func potionCheckMinHp(minHp)
  ? hp < minHp
     activate potion

func potionCheckEndRun()
  ?pickup.treasure
    activate potion

func potionCheckDebuffCount(maxDebuffs)
  ? debuffs.count > maxDebuffs
    activate potion
    
func displayFuncName(funcName)
  var DEBUG = storage.Get("DEBUG",false)
  ?DEBUG = true
    var funcName = @funcName@
    var xOffset = screen.w - string.Size(funcName)
    >`@xOffset@,1,@funcName@

func pickupCheck()
  ?pickup.distance <= 16
    equipL triskel
    equipR star stone
  :? pickup.distance > 16
    equipL triskel
    equipR ouro

func quickDash(rightHand)
  ?foe.distance >= 11 & foe.distance <= 15
    equipR dashing shield
  :?foe.distance > 15 
    equipR trisk
  :
    equipR @rightHand@
 
func quickDashTwo(twoHander)
  ?foe.distance >= 11 & foe.distance <= 15
    equipR dashing shield
  :?foe.distance > 15 
    equipR trisk
  :
    equip @twoHander@

func brewPotion(type)
  ?loc.begin
    ?type = healing
      brew tar
    ?type = vampiric
      brew tar + bronze
    ?type = cleansing
      brew tar + wood
    ?type = defensive
      brew tar + stone
    ?type = lightning
      brew bronze
    ?type = berserk
      brew bronze + wood
    ?type = lucky
      brew bronze + stone
    ?type = experience
      brew wood
    ?type = invisibility
      brew wood + stone
    ?type = strength
      brew stone

/*
Levels
*/

/*
****************
* Rocky Plateau 
* rocky_plateau
****************
* Boss Data
*
****************
* Foes Data
*
****************
*/
//?loc = rocky_plateau

// ... and the other levels as they migrate

/*
Settings
*/
var USE_SKELETON_ARM = false
var USE_BARDICHE = true
var USE_FISSURE_STONE = true
var USE_EXPERIENCE_STONE = true
var USE_BLADE = true
var BLADE_MIN_FOES = 3
var BLADE_MAX_FOES = 6

/*
Main loop
*/
//

func useBlade(minFoes,maxFoes)
    var blCD
    var foeCount
    foeCount = foe.count
    blCD = item.GetCooldown(＂blade＂)
    // ?(blCD <= 0 | blCD > 2370) & ((foeCount > minFoes & foe.distance <= 11) | foeCount >= maxFoes)
    ?(blCD <= 0) & ((foeCount > minFoes & foe.distance <= 11) | foeCount >= maxFoes)
        equip blade
        activate R

func useFissureStone()
    var fsCooldown = 540
    ?fsCooldown <= 0 & foe.distance <= 18
        equipR fissure
        fsCooldown = 540
    :?fsCooldown > 480 & fsCooldown <= 540
        >`0,15,#green,Fissure Stone: Equip
        fsCooldown--
    :?fsCooldown <= 0 & foe.distance > 18
        >`0,15,#red,Fissure Stone: out of range
    :
        fsCooldown--
        >`0,15,#yellow,Fissure Stone:
        ^@fsCooldown@/540
        fsCooldown--

func useBardiche()
    var bCD
    bCD = item.GetCooldown(＂bardiche＂)
    ?foe.distance < 10 & bCD <= 0 | bCD > 870
        equip bardiche
        activate R
        >`0,14,#green,Bardiche: ATTACKING
    :?bCD > 0 & bCD <= 870
        >`0,14,#yellow,Bardiche: @bCD@/900
    :?foe.distance >= 10
        >`0,14,#red,Bardiche: out of range

func useSkeletonArm()
    ?item.GetCooldown(skeleton_arm) = 0 |
    ^ item.GetCooldown(skeleton_arm) > 1320
            equip skeleton arm
            ?item.CanActivate(skeleton_arm)
                    activate R

func manager(mgr)
    // Disable HUD activation icons
    disable hud afr

    // Show monster data better
    import UI/BetterInfo2


    // First use items with a cast duration
    // to avoid interrupted casting
    ?foe = boss | foe = ice_wall
        ?USE_SKELETON_ARM = true
            useSkeletonArm()
        ?USE_BARDICHE
            useBardiche()
        ?USE_FISSURE_STONE
            useFissureStone()
    ?USE_BLADE
        useBlade(BLADE_MIN_FOES,BLADE_MAX_FOES)

    // foeStateText()
    potionCheckMinHp(7)
    potionCheckDebuffCount(3)
    showEquipped(short)
    foeShortName(0,-2)
    foeTarget(arrow)
    pickupCheck()
    

    // our level "class" pointer
    var lvl
    ?loc = rocky_plateau                       // Rocky Plateau
        lvl = import Personal/rocky_plateau
    :?loc = deadwood_valley                    // Deadwood Canyon
        lvl = import Personal/deadwood_valley
    :?loc = caustic_caves                      // Caves of Fear
        lvl = import Personal/caustic_caves
    :?loc = fungus_forest                      // Mushroom Forest
        lvl = import Personal/fungus_forest
    :?loc = undead_crypt                       // Haunted Halls
        lvl = import Personal/undead_crypt
    :?loc = bronze_mine                        // Boiling Mine
        lvl = import Personal/bronze_mine
    :?loc = icy_ridge                          // Icy Ridge
        lvl = import Personal/icy_ridge
    :?loc = temple                             // Temple
        lvl = import Personal/temple
    :
        >`0,0,#red,UNKNOWN LEVEL!
    ?lvl
        lvl.run(mgr)

    // >`0,21,#red,@foe.debuffs.string@
    // >`0,22,#green,@foe.buffs.string@
    // >`0,23,--------------------------------
    // >`0,24,#red,@debuffs.string@
    // >`0,25,#green,@buffs.string@

